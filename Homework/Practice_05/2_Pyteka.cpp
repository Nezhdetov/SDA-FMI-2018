/*
Лили живее в приказния свят Алгоритмия. Тя много обича да се разхожда по всевъзможните пътеки в този свят,
но както всички в Алгоритмия и тя намира алгоритмичен проблем във всяко едно занимание.
Всяка пътека се състои от поредица камъни с бял, зелен или син цвят.
Камъните също така са номерирани. Лили не харесва зелените и сините камъни и
решава да ги замени с бели камъни по следните правила:

1) Ако Лили види зелен камък номериран с числото K тя го премахва и също така премахва предходните K камъка
като ги заменя с бял камък, който има за номер сбора от техните номера.
2) Ако Лили види син камък номериран с числото К тя го премахва и също така премахва предходните К камъка
като ги заменя с бял камък, който има за номер най-големия техен номер.

От вас се иска да помогнете на Лили да промени пътеката, като извършите непосилните за нея изчисления.
На първия ред ще получите число N - броя камъни от които се състои пътеката.
Следват N реда, като всеки ред е от вида: white K или blue К или green К, като думата съответства на цвета на камъка,
а K съотвества на числото, с което е номериран.
След, като промените пътеката на един ред изведете номерата на камъните, от които е съставена новата пътека.

Input Format

N - големината на пътеката

Следват N реда от вида: white К или green K или blue K, където първата дума съответства на цвета на камъка,
а K съотвества на числото записано на камъка

Constraints
1 <= N <= 1 000 000 -2^31 < K < 2^31
Ако пътеката има само един камък той винаги ще е бял
Ако камъка е с зелен или син цвят K ще е по-голямо от 1

Output Format
На един ред номерата на камъните, от които е съставена новата пътека

Пример 1:
Вход: 7
white 3
white 4
white 6
green 2
white 3
blue 2
white 3
Изход: 3 10 3
 */

#include <iostream>
#include <string>
#include <list>

int main()
{
    int N = 0;
    std::cin >> N;

    std::list<long long> stones;

    for (int k = 0; k < N; k++)
    {
        std::string color;
        std::getline(std::cin, color, ' ');

        long long number;
        std::cin >> number;
        if (color == "white" || color == "\nwhite")
        {
            stones.push_back(number);
        }
        else if (color == "green" || color == "\ngreen")
        {
            long long sum = 0;
            for (int i = 0; i < number; i++)
            {
                sum += stones.back();
                stones.pop_back();
            }

            stones.push_back(sum);
        }
        else if (color == "blue" || color == "\nblue")
        {
            long long max = 0;
            for (int i = 0; i < number; i++)
            {
                long long current = stones.back();
                stones.pop_back();
                if (max < current)
                {
                    max = current;
                }
            }

            stones.push_back(max);
        }
    }

    for (int stone : stones)
    {
        std::cout << stone << " ";
    }

    return 0;
}
